CREATE TABLE tb_veiculos (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    placa VARCHAR2(8) NOT NULL,
    tipo_veiculo VARCHAR2(50) NOT NULL,
    data_hora_transito TIMESTAMP NOT NULL,
    localizacao VARCHAR2(100) NOT NULL
);

CREATE TABLE tb_semaforo (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    localizacao VARCHAR2(100) NOT NULL UNIQUE,
    status VARCHAR2(10) NOT NULL CHECK (status IN ('Verde', 'Amarelo', 'Vermelho')),
    tempo_sinal_verde INTERVAL DAY(0) TO SECOND(0) NOT NULL,
    tempo_sinal_amarelo INTERVAL DAY(0) TO SECOND(0) NOT NULL,
    tempo_sinal_vermelho INTERVAL DAY(0) TO SECOND(0) NOT NULL
);

CREATE TABLE tb_padrao_trafego (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    localizacao VARCHAR2(100) NOT NULL,
    data_hora_registro TIMESTAMP NOT NULL,
    fluxo NUMBER(5, 2) NOT NULL,
    dia_semana VARCHAR2(9) NOT NULL CHECK (dia_semana IN ('Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado')),
    hora TIMESTAMP NOT NULL
);

CREATE TABLE tb_acidente (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    localizacao VARCHAR2(100) NOT NULL,
    data_hora_acidente TIMESTAMP NOT NULL,
    tipo_acidente VARCHAR2(50) NOT NULL,
    gravidade_acidente VARCHAR2(20) NOT NULL CHECK (gravidade_acidente IN ('Leve', 'Moderado', 'Grave'))
);

CREATE TABLE tb_notificacao_emergencia (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_acidente NUMBER NOT NULL,
    data_hora_envio TIMESTAMP NOT NULL,
    status_envio VARCHAR2(20) NOT NULL CHECK (status_envio IN ('Enviado', 'Falha')),
    servico_responsavel VARCHAR2(50) NOT NULL CHECK (servico_responsavel IN ('Ambulância', 'Polícia', 'Bombeiros')),
    CONSTRAINT fk_notificacao_acidente FOREIGN KEY (id_acidente) REFERENCES tb_acidente(id)
);

CREATE TABLE tb_acidente_semaforo (
    id_acidente NUMBER NOT NULL,
    id_semaforo NUMBER NOT NULL,
    PRIMARY KEY (id_acidente, id_semaforo),
    CONSTRAINT fk_acidente_semaforo_acidente FOREIGN KEY (id_acidente) REFERENCES tb_acidente(id),
    CONSTRAINT fk_acidente_semaforo_semaforo FOREIGN KEY (id_semaforo) REFERENCES tb_semaforo(id)
);

CREATE TABLE tb_acidente_veiculo (
    id_acidente NUMBER NOT NULL,
    id_veiculo NUMBER NOT NULL,
    PRIMARY KEY (id_acidente, id_veiculo),
    CONSTRAINT fk_acidente_veiculo_acidente FOREIGN KEY (id_acidente) REFERENCES tb_acidente(id),
    CONSTRAINT fk_acidente_veiculo_veiculo FOREIGN KEY (id_veiculo) REFERENCES tb_veiculos(id)
);

CREATE TABLE tb_padrao_trafego_veiculo (
    id_padrao_trafego NUMBER NOT NULL,
    id_veiculo NUMBER NOT NULL,
    PRIMARY KEY (id_padrao_trafego, id_veiculo),
    CONSTRAINT fk_padrao_trafego_veiculo_padrao FOREIGN KEY (id_padrao_trafego) REFERENCES tb_padrao_trafego(id),
    CONSTRAINT fk_padrao_trafego_veiculo_veiculo FOREIGN KEY (id_veiculo) REFERENCES tb_veiculos(id)
);

CREATE TABLE tb_estoque (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    descricao VARCHAR2(100) NOT NULL,
    quantidade NUMBER NOT NULL,
    nivel_minimo NUMBER NOT NULL
);

CREATE TABLE tb_reposicao (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    id_estoque NUMBER NOT NULL,
    data_pedido TIMESTAMP NOT NULL,
    quantidade_solicitada NUMBER NOT NULL,
    CONSTRAINT fk_reposicao_estoque FOREIGN KEY (id_estoque) REFERENCES tb_estoque(id)
);



CREATE OR REPLACE PROCEDURE ajustar_tempos_semaforo(p_localizacao VARCHAR2) AS
    v_fluxo NUMBER;
    v_tempo_verde INTERVAL DAY(0) TO SECOND(0);
    v_tempo_amarelo INTERVAL DAY(0) TO SECOND(0) := INTERVAL '5' SECOND;
    v_tempo_vermelho INTERVAL DAY(0) TO SECOND(0);
BEGIN
    
    SELECT fluxo INTO v_fluxo
    FROM tb_padrao_trafego
    WHERE localizacao = p_localizacao
    ORDER BY data_hora_registro DESC
    FETCH FIRST 1 ROWS ONLY;
    
    
    IF v_fluxo > 100 THEN
        v_tempo_verde := INTERVAL '60' SECOND;
        v_tempo_vermelho := INTERVAL '30' SECOND;
    ELSIF v_fluxo BETWEEN 50 AND 100 THEN
        v_tempo_verde := INTERVAL '45' SECOND;
        v_tempo_vermelho := INTERVAL '45' SECOND;
    ELSE
        v_tempo_verde := INTERVAL '30' SECOND;
        v_tempo_vermelho := INTERVAL '60' SECOND;
    END IF;
    
    
    UPDATE tb_semaforo
    SET tempo_sinal_verde = v_tempo_verde,
        tempo_sinal_amarelo = v_tempo_amarelo,
        tempo_sinal_vermelho = v_tempo_vermelho
    WHERE localizacao = p_localizacao;
    
    COMMIT;
END ajustar_tempos_semaforo;
/


CREATE OR REPLACE TRIGGER trg_enviar_notificacao_acidente
AFTER INSERT ON tb_acidente
FOR EACH ROW
DECLARE
    v_id_notificacao NUMBER;
BEGIN
    
    INSERT INTO tb_notificacao_emergencia (id_acidente, data_hora_envio, status_envio, servico_responsavel)
    VALUES (:NEW.id, SYSTIMESTAMP, 'Enviado', 'Ambulância')
    RETURNING id INTO v_id_notificacao;
    
    
    INSERT INTO tb_acidente_semaforo (id_acidente, id_semaforo)
    SELECT :NEW.id, id
    FROM tb_semaforo
    WHERE localizacao = :NEW.localizacao;
    
    
    ajustar_tempos_semaforo(:NEW.localizacao);
    
    COMMIT;
END trg_enviar_notificacao_acidente;
/


CREATE OR REPLACE PROCEDURE limpar_dados_antigos AS
BEGIN
    
    DELETE FROM tb_veiculos
    WHERE data_hora_transito < SYSDATE - 30;
    
    
    DELETE FROM tb_padrao_trafego
    WHERE data_hora_registro < SYSDATE - 30;
    
    
    DELETE FROM tb_acidente
    WHERE data_hora_acidente < SYSDATE - 365;
    
    COMMIT;
END limpar_dados_antigos;
/


CREATE OR REPLACE PROCEDURE verificar_estoque_reposicao AS
    CURSOR c_estoque_critico IS
        SELECT id, descricao, quantidade, nivel_minimo
        FROM tb_estoque
        WHERE quantidade < nivel_minimo;
        
    v_id_estoque NUMBER;
    v_quantidade_solicitada NUMBER;
BEGIN
    
    FOR rec IN c_estoque_critico LOOP
        v_id_estoque := rec.id;
        v_quantidade_solicitada := rec.nivel_minimo - rec.quantidade;
        
        
        INSERT INTO tb_reposicao (id_estoque, data_pedido, quantidade_solicitada)
        VALUES (v_id_estoque, SYSTIMESTAMP, v_quantidade_solicitada);
        
        
        DBMS_OUTPUT.PUT_LINE('Pedido de reposição gerado para peça: ' || rec.descricao || 
                             ', Quantidade solicitada: ' || v_quantidade_solicitada);
    END LOOP;
    
    COMMIT;
END verificar_estoque_reposicao;
/